package com.cloud.shiro.config;import com.cloud.shiro.realm.CustomerRealm;import org.apache.shiro.realm.Realm;import org.apache.shiro.spring.web.ShiroFilterFactoryBean;import org.apache.shiro.web.mgt.DefaultWebSecurityManager;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import java.util.HashMap;import java.util.Map;/** * Shiro的核心配置类，用来整合shiro框架 * @Author zhouTao * @Date 2023/2/10 */@Configurationpublic class ShiroConfig {    //ShiroFilter过滤所有请求    @Bean(name = "shiroFilterFactoryBean")    public ShiroFilterFactoryBean getShiroFilterFactoryBean(DefaultWebSecurityManager securityManager) {        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();        //给ShiroFilter配置安全管理器        shiroFilterFactoryBean.setSecurityManager(securityManager);        //配置系统受限资源        //配置系统公共资源        Map<String, String> map = new HashMap<String, String>();        map.put("/user/login","anon");//表示这个为公共资源 一定是在受限资源上面        map.put("/**","authc");//表示这个受限资源需要认证和授权        // 设置认证界面路径        shiroFilterFactoryBean.setLoginUrl("/login.jsp");        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);        return shiroFilterFactoryBean;    }    //创建安全管理器    @Bean    public DefaultWebSecurityManager getDefaultWebSecurityManager(Realm realm) {        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();        securityManager.setRealm(realm);        return securityManager;    }    //创建自定义Realm    @Bean    public Realm getRealm() {        CustomerRealm realm = new CustomerRealm();        return realm;    }}